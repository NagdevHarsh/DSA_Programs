You are given an integer array nums. You are initially positioned at the array's 
first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int farthest = 0;

        for (int i = 0; i < nums.size(); i++) {
            if (i > farthest) {
                return false; // current index is unreachable
            }
            farthest = max(farthest, i + nums[i]);
            if (farthest >= nums.size() - 1) {
                return true; // can reach or go beyond last index
            }
        }

        return true;
    }
};
farthest keeps track of the farthest index we can currently reach.
If at any point i > farthest, it means you're stuck — return false.
If farthest >= nums.size() - 1, you can reach the end — return true.
