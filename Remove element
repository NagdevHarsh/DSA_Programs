Problem Explanation
The goal of this problem is to remove all occurrences of a given integer val from an array nums in-place. 
You should then return the count of remaining elements that are not equal to val. The order of the elements 
can be changed, and you don't need to worry about the elements beyond the new length k.

Key Requirements:
In-place Modification: Modify the nums array directly without using additional space for another array.
Return Count: Return the count k of elements that are not equal to val.
Remaining Elements: After the first k elements, the content of nums does not matter.

Approach:
Two Pointer Technique: Use one pointer to iterate through the array (i), and another pointer (k) to keep track of where to place the next non-val element.

Iteration:
If the current element nums[i] is not equal to val, place it at nums[k] and increment k.
Continue iterating through the array.
After processing all elements, k will represent the count of elements that are not equal to val.

PYTHON CODE:
def removeElement(nums, val):
    k = 0  # Pointer for the position to place non-val elements
    
    for i in range(len(nums)):
        if nums[i] != val:
            nums[k] = nums[i]  # Place the non-val element at index k
            k += 1  # Move the pointer forward
    
    return k  # k is the new length of the array without val

# Example usage:
# Example 1
nums1 = [3, 2, 2, 3]
val1 = 3
k1 = removeElement(nums1, val1)
print(k1, nums1[:k1])  # Output: 2 [2, 2]

# Example 2
nums2 = [0, 1, 2, 2, 3, 0, 4, 2]
val2 = 2
k2 = removeElement(nums2, val2)
print(k2, nums2[:k2])  # Output: 5 [0, 1, 3, 0, 4]
